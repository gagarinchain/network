// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import api "github.com/gagarinchain/network/common/api"

import common "github.com/gagarinchain/network/common/eth/common"
import context "context"
import mock "github.com/stretchr/testify/mock"
import networkcommon "github.com/gagarinchain/network/common"

// BlockService is an autogenerated mock type for the BlockService type
type BlockService struct {
	mock.Mock
}

// RequestBlock provides a mock function with given fields: ctx, hash, peer
func (_m *BlockService) RequestBlock(ctx context.Context, hash common.Hash, peer *networkcommon.Peer) (api.Block, error) {
	ret := _m.Called(ctx, hash, peer)

	var r0 api.Block
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash, *networkcommon.Peer) api.Block); ok {
		r0 = rf(ctx, hash, peer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, common.Hash, *networkcommon.Peer) error); ok {
		r1 = rf(ctx, hash, peer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestHeaders provides a mock function with given fields: ctx, low, high, peer
func (_m *BlockService) RequestHeaders(ctx context.Context, low int32, high int32, peer *networkcommon.Peer) ([]api.Header, error) {
	ret := _m.Called(ctx, low, high, peer)

	var r0 []api.Header
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, *networkcommon.Peer) []api.Header); ok {
		r0 = rf(ctx, low, high, peer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Header)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32, int32, *networkcommon.Peer) error); ok {
		r1 = rf(ctx, low, high, peer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
