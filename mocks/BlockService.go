// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import blockchain "github.com/poslibp2p/blockchain"
import common "github.com/poslibp2p/common/eth/common"
import context "context"
import mock "github.com/stretchr/testify/mock"
import poslibp2pcommon "github.com/poslibp2p/common"

// BlockService is an autogenerated mock type for the BlockService type
type BlockService struct {
	mock.Mock
}

// RequestBlock provides a mock function with given fields: ctx, hash, peer
func (_m *BlockService) RequestBlock(ctx context.Context, hash common.Hash, peer *poslibp2pcommon.Peer) (chan *blockchain.Block, chan error) {
	ret := _m.Called(ctx, hash, peer)

	var r0 chan *blockchain.Block
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash, *poslibp2pcommon.Peer) chan *blockchain.Block); ok {
		r0 = rf(ctx, hash, peer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *blockchain.Block)
		}
	}

	var r1 chan error
	if rf, ok := ret.Get(1).(func(context.Context, common.Hash, *poslibp2pcommon.Peer) chan error); ok {
		r1 = rf(ctx, hash, peer)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan error)
		}
	}

	return r0, r1
}

// RequestBlocksAtHeight provides a mock function with given fields: ctx, height, peer
func (_m *BlockService) RequestBlocksAtHeight(ctx context.Context, height int32, peer *poslibp2pcommon.Peer) (chan *blockchain.Block, chan error) {
	ret := _m.Called(ctx, height, peer)

	var r0 chan *blockchain.Block
	if rf, ok := ret.Get(0).(func(context.Context, int32, *poslibp2pcommon.Peer) chan *blockchain.Block); ok {
		r0 = rf(ctx, height, peer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *blockchain.Block)
		}
	}

	var r1 chan error
	if rf, ok := ret.Get(1).(func(context.Context, int32, *poslibp2pcommon.Peer) chan error); ok {
		r1 = rf(ctx, height, peer)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan error)
		}
	}

	return r0, r1
}

// RequestFork provides a mock function with given fields: ctx, lowHeight, hash, peer
func (_m *BlockService) RequestFork(ctx context.Context, lowHeight int32, hash common.Hash, peer *poslibp2pcommon.Peer) (chan *blockchain.Block, chan error) {
	ret := _m.Called(ctx, lowHeight, hash, peer)

	var r0 chan *blockchain.Block
	if rf, ok := ret.Get(0).(func(context.Context, int32, common.Hash, *poslibp2pcommon.Peer) chan *blockchain.Block); ok {
		r0 = rf(ctx, lowHeight, hash, peer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *blockchain.Block)
		}
	}

	var r1 chan error
	if rf, ok := ret.Get(1).(func(context.Context, int32, common.Hash, *poslibp2pcommon.Peer) chan error); ok {
		r1 = rf(ctx, lowHeight, hash, peer)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan error)
		}
	}

	return r0, r1
}
