// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import big "math/big"
import common "github.com/gagarinchain/network/common/eth/common"
import crypto "github.com/gagarinchain/network/common/eth/crypto"
import hotstuff "github.com/gagarinchain/network/hotstuff"
import mock "github.com/stretchr/testify/mock"
import networkcommon "github.com/gagarinchain/network/common"

// Pacer is an autogenerated mock type for the Pacer type
type Pacer struct {
	mock.Mock
}

// FireEvent provides a mock function with given fields: event
func (_m *Pacer) FireEvent(event hotstuff.Event) {
	_m.Called(event)
}

// GetBitmap provides a mock function with given fields: src
func (_m *Pacer) GetBitmap(src map[common.Address]*crypto.Signature) (*big.Int, int) {
	ret := _m.Called(src)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(map[common.Address]*crypto.Signature) *big.Int); ok {
		r0 = rf(src)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(map[common.Address]*crypto.Signature) int); ok {
		r1 = rf(src)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// GetCurrent provides a mock function with given fields:
func (_m *Pacer) GetCurrent() *networkcommon.Peer {
	ret := _m.Called()

	var r0 *networkcommon.Peer
	if rf, ok := ret.Get(0).(func() *networkcommon.Peer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkcommon.Peer)
		}
	}

	return r0
}

// GetCurrentView provides a mock function with given fields:
func (_m *Pacer) GetCurrentView() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// GetNext provides a mock function with given fields:
func (_m *Pacer) GetNext() *networkcommon.Peer {
	ret := _m.Called()

	var r0 *networkcommon.Peer
	if rf, ok := ret.Get(0).(func() *networkcommon.Peer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkcommon.Peer)
		}
	}

	return r0
}

// ProposerForHeight provides a mock function with given fields: blockHeight
func (_m *Pacer) ProposerForHeight(blockHeight int32) *networkcommon.Peer {
	ret := _m.Called(blockHeight)

	var r0 *networkcommon.Peer
	if rf, ok := ret.Get(0).(func(int32) *networkcommon.Peer); ok {
		r0 = rf(blockHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkcommon.Peer)
		}
	}

	return r0
}

// SubscribeProtocolEvents provides a mock function with given fields: sub
func (_m *Pacer) SubscribeProtocolEvents(sub chan hotstuff.Event) {
	_m.Called(sub)
}
