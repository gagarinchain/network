// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/gagarinchain/network/common"

	ethcommon "github.com/gagarinchain/network/common/eth/common"

	mock "github.com/stretchr/testify/mock"
)

// Synchronizer is an autogenerated mock type for the Synchronizer type
type Synchronizer struct {
	mock.Mock
}

// RequestBlocks provides a mock function with given fields: ctx, low, high, peer
func (_m *Synchronizer) RequestBlocks(ctx context.Context, low int32, high int32, peer *common.Peer) error {
	ret := _m.Called(ctx, low, high, peer)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, *common.Peer) error); ok {
		r0 = rf(ctx, low, high, peer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestBlocksParallel provides a mock function with given fields: ctx, low, high
func (_m *Synchronizer) RequestBlocksParallel(ctx context.Context, low int32, high int32) error {
	ret := _m.Called(ctx, low, high)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) error); ok {
		r0 = rf(ctx, low, high)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestFork provides a mock function with given fields: ctx, hash, peer
func (_m *Synchronizer) RequestFork(ctx context.Context, hash ethcommon.Hash, peer *common.Peer) error {
	ret := _m.Called(ctx, hash, peer)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ethcommon.Hash, *common.Peer) error); ok {
		r0 = rf(ctx, hash, peer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
