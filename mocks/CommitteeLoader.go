// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import common "github.com/gagarinchain/network/common"
import crypto "github.com/libp2p/go-libp2p-crypto"
import mock "github.com/stretchr/testify/mock"

// CommitteeLoader is an autogenerated mock type for the CommitteeLoader type
type CommitteeLoader struct {
	mock.Mock
}

// LoadPeerFromFile provides a mock function with given fields: fileName, peer
func (_m *CommitteeLoader) LoadPeerFromFile(fileName string, peer *common.Peer) (crypto.PrivKey, error) {
	ret := _m.Called(fileName, peer)

	var r0 crypto.PrivKey
	if rf, ok := ret.Get(0).(func(string, *common.Peer) crypto.PrivKey); ok {
		r0 = rf(fileName, peer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.PrivKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *common.Peer) error); ok {
		r1 = rf(fileName, peer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadPeerListFromFile provides a mock function with given fields: filePath
func (_m *CommitteeLoader) LoadPeerListFromFile(filePath string) []*common.Peer {
	ret := _m.Called(filePath)

	var r0 []*common.Peer
	if rf, ok := ret.Get(0).(func(string) []*common.Peer); ok {
		r0 = rf(filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*common.Peer)
		}
	}

	return r0
}
