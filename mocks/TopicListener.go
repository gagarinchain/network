// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"

import pubsub "github.com/libp2p/go-libp2p-pubsub"

// TopicListener is an autogenerated mock type for the TopicListener type
type TopicListener struct {
	mock.Mock
}

// Listen provides a mock function with given fields: ctx, sub
func (_m *TopicListener) Listen(ctx context.Context, sub *pubsub.Subscription) {
	_m.Called(ctx, sub)
}

// Provide provides a mock function with given fields: ctx
func (_m *TopicListener) Provide(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx
func (_m *TopicListener) Subscribe(ctx context.Context) (*pubsub.Subscription, error) {
	ret := _m.Called(ctx)

	var r0 *pubsub.Subscription
	if rf, ok := ret.Get(0).(func(context.Context) *pubsub.Subscription); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
