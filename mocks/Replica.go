// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import common "github.com/gagarinchain/network/common"
import hotstuff "github.com/gagarinchain/network/hotstuff"
import message "github.com/gagarinchain/network/common/message"
import mock "github.com/stretchr/testify/mock"

// Replica is an autogenerated mock type for the Replica type
type Replica struct {
	mock.Mock
}

// CheckCommit provides a mock function with given fields:
func (_m *Replica) CheckCommit() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OnEpochStart provides a mock function with given fields: m, s
func (_m *Replica) OnEpochStart(m *message.Message, s *common.Peer) {
	_m.Called(m, s)
}

// OnNextView provides a mock function with given fields:
func (_m *Replica) OnNextView() {
	_m.Called()
}

// OnReceiveProposal provides a mock function with given fields: proposal
func (_m *Replica) OnReceiveProposal(proposal *hotstuff.Proposal) error {
	ret := _m.Called(proposal)

	var r0 error
	if rf, ok := ret.Get(0).(func(*hotstuff.Proposal) error); ok {
		r0 = rf(proposal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartEpoch provides a mock function with given fields: i
func (_m *Replica) StartEpoch(i int32) {
	_m.Called(i)
}

// SubscribeEpochChange provides a mock function with given fields: trigger
func (_m *Replica) SubscribeEpochChange(trigger chan interface{}) {
	_m.Called(trigger)
}
