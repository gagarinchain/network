// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import gagarinchain "github.com/gagarinchain/network"
import leveldb "github.com/syndtr/goleveldb/leveldb"
import mock "github.com/stretchr/testify/mock"

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Contains provides a mock function with given fields: rtype, key
func (_m *Storage) Contains(rtype gagarinchain.ResourceType, key []byte) bool {
	ret := _m.Called(rtype, key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(gagarinchain.ResourceType, []byte) bool); ok {
		r0 = rf(rtype, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Delete provides a mock function with given fields: rtype, key
func (_m *Storage) Delete(rtype gagarinchain.ResourceType, key []byte) error {
	ret := _m.Called(rtype, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(gagarinchain.ResourceType, []byte) error); ok {
		r0 = rf(rtype, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: rtype, key
func (_m *Storage) Get(rtype gagarinchain.ResourceType, key []byte) ([]byte, error) {
	ret := _m.Called(rtype, key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(gagarinchain.ResourceType, []byte) []byte); ok {
		r0 = rf(rtype, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gagarinchain.ResourceType, []byte) error); ok {
		r1 = rf(rtype, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Keys provides a mock function with given fields: rtype, keyPrefix
func (_m *Storage) Keys(rtype gagarinchain.ResourceType, keyPrefix []byte) [][]byte {
	ret := _m.Called(rtype, keyPrefix)

	var r0 [][]byte
	if rf, ok := ret.Get(0).(func(gagarinchain.ResourceType, []byte) [][]byte); ok {
		r0 = rf(rtype, keyPrefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	return r0
}

// Put provides a mock function with given fields: rtype, key, value
func (_m *Storage) Put(rtype gagarinchain.ResourceType, key []byte, value []byte) error {
	ret := _m.Called(rtype, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(gagarinchain.ResourceType, []byte, []byte) error); ok {
		r0 = rf(rtype, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stats provides a mock function with given fields:
func (_m *Storage) Stats() *leveldb.DBStats {
	ret := _m.Called()

	var r0 *leveldb.DBStats
	if rf, ok := ret.Get(0).(func() *leveldb.DBStats); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*leveldb.DBStats)
		}
	}

	return r0
}
