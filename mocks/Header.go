// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import common "github.com/gagarinchain/network/common/eth/common"
import crypto "github.com/gagarinchain/network/common/eth/crypto"
import mock "github.com/stretchr/testify/mock"
import pb "github.com/gagarinchain/network/common/protobuff"
import time "time"

// Header is an autogenerated mock type for the Header type
type Header struct {
	mock.Mock
}

// DataHash provides a mock function with given fields:
func (_m *Header) DataHash() common.Hash {
	ret := _m.Called()

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// GetMessage provides a mock function with given fields:
func (_m *Header) GetMessage() *pb.BlockHeader {
	ret := _m.Called()

	var r0 *pb.BlockHeader
	if rf, ok := ret.Get(0).(func() *pb.BlockHeader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.BlockHeader)
		}
	}

	return r0
}

// Hash provides a mock function with given fields:
func (_m *Header) Hash() common.Hash {
	ret := _m.Called()

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// Height provides a mock function with given fields:
func (_m *Header) Height() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// IsGenesisBlock provides a mock function with given fields:
func (_m *Header) IsGenesisBlock() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Parent provides a mock function with given fields:
func (_m *Header) Parent() common.Hash {
	ret := _m.Called()

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// QCHash provides a mock function with given fields:
func (_m *Header) QCHash() common.Hash {
	ret := _m.Called()

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// SetHash provides a mock function with given fields:
func (_m *Header) SetHash() {
	_m.Called()
}

// SetQCHash provides a mock function with given fields: hash
func (_m *Header) SetQCHash(hash common.Hash) {
	_m.Called(hash)
}

// Sign provides a mock function with given fields: key
func (_m *Header) Sign(key *crypto.PrivateKey) *crypto.Signature {
	ret := _m.Called(key)

	var r0 *crypto.Signature
	if rf, ok := ret.Get(0).(func(*crypto.PrivateKey) *crypto.Signature); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crypto.Signature)
		}
	}

	return r0
}

// StateHash provides a mock function with given fields:
func (_m *Header) StateHash() common.Hash {
	ret := _m.Called()

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// Timestamp provides a mock function with given fields:
func (_m *Header) Timestamp() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// ToStorageProto provides a mock function with given fields:
func (_m *Header) ToStorageProto() *pb.BlockHeaderS {
	ret := _m.Called()

	var r0 *pb.BlockHeaderS
	if rf, ok := ret.Get(0).(func() *pb.BlockHeaderS); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.BlockHeaderS)
		}
	}

	return r0
}

// TxHash provides a mock function with given fields:
func (_m *Header) TxHash() common.Hash {
	ret := _m.Called()

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}
